1) Order

2) Setting 유일한 인스턴스만 생성해서 만들어라 -> 정적 팩토리 사용 (인스턴스 통제)
 - 생성자로 못하는 것을 할 수 있다. (객체생성을 컨트롤 할 수 있음)

3) HelloServiceFactory
 - lang에 따라서 korean, english 구현부로 나눠야 할 경우 어떻게 하면 되나? -> 정적팩토리 이용

4) 정적매서드 단점
 - 4-1 . 상속이 어렵다 , (기본 생성자 생성 막음으로)
 - 4-2 . 정적 매서드 명 작명 팁 (네이밍 패턴)
        of(매개변수) : 매개변수를 받아서 먼가를 만들 경우
        get(매개변수) : 미리만들어저 있는 걸 가져오는 경우
        new(매개변수) : 이 팩토리 안에서 새로 만든다면
 - 4-3 . 문서화 추천

5) OrderStatus 열거타입
    주문의 상태 변화 어떤게? preparing, shipped, delivering, delivered (준비중, 배달된, 배송중, 배달된)
    정해져있는 상수 값

    type safe - 타입에 안정적인 것

    ( 0 : 준비중, 1 : 배달된 /
        private final int Preparing = 0;
        이 상수의 값에 100, 200이 들어간다면??? -> type safe를 위한 방어하는 코드가 들어가야함
    )
    위와 같은 고민이 필요없다. -> compile 차원에서 방어해줌.

6) (건너뛰기)플라이 웨이트 패턴 (Flyweight - 복싱 가벼운 체급, 객체를 가볍게 만들어 메모리 사용을 줄이는 패턴)
 - 같은 객체가 자주 사용된다면 ?  (객체 재사용 및 캐싱하면 되지 않을까?)
 - 자주 변하는 객채 , 변하지 않는 객채를 나눠서

7) (인터페이스와 정적 메서드 건너뛰기)HelloService
 - java9 부터 interface내에 static 매서드에서 외부로 노출하기 싫은 매서드일 경우 private static 선언이 가능해졌다.

8) (서비스 제공자 프레임워크)
  -

9) 리플랙션 (거울에 반사된 나의 모습 - 반영된 이미지를 보고 )
 - 예를 들어 jvm이 class의 정보를 읽어서 메모리에 올린다. ( ex 어노테이션에 따라서 어떤 작업을 하게 한다던가 )





















